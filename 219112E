> data=read.csv("wine.csv")
> #to show first coloum of data set so as to remove it
> data[1]
    Class
1       1
2       1
3       1
4       1
5       1
6       1
7       1
8       1
9       1
10      1
11      1
12      1
13      1
14      1
15      1
16      1
17      1
18      1
19      1
20      1
21      1
22      1
23      1
24      1
25      1
26      1
27      1
28      1
29      1
30      1
31      1
32      1
33      1
34      1
35      1
36      1
37      1
38      1
39      1
40      1
41      1
42      1
43      1
44      1
45      1
46      1
47      1
48      1
49      1
50      1
51      1
52      1
53      1
54      1
55      1
56      1
57      1
58      1
59      1
60      2
61      2
62      2
63      2
64      2
65      2
66      2
67      2
68      2
69      2
70      2
71      2
72      2
73      2
74      2
75      2
76      2
77      2
78      2
79      2
80      2
81      2
82      2
83      2
84      2
85      2
86      2
87      2
88      2
89      2
90      2
91      2
92      2
93      2
94      2
95      2
96      2
97      2
98      2
99      2
100     2
101     2
102     2
103     2
104     2
105     2
106     2
107     2
108     2
109     2
110     2
111     2
112     2
113     2
114     2
115     2
116     2
117     2
118     2
119     2
120     2
121     2
122     2
123     2
124     2
125     2
126     2
127     2
128     2
129     2
130     2
131     3
132     3
133     3
134     3
135     3
136     3
137     3
138     3
139     3
140     3
141     3
142     3
143     3
144     3
145     3
146     3
147     3
148     3
149     3
150     3
151     3
152     3
153     3
154     3
155     3
156     3
157     3
158     3
159     3
160     3
161     3
162     3
163     3
164     3
165     3
166     3
167     3
168     3
169     3
170     3
171     3
172     3
173     3
174     3
175     3
176     3
177     3
178     3
> #intall dplr package to help with data manipulation and remove colomn class 
> library(dplyr)
> dataclean = select(data, -1)
> #cleaned data set without coloumn 1
> head(dataclean)
  Alcohol MalicAcid  Ash AlcalinityOfAsh Magnesium TotalPhenols Flavanoids NonflavanoidPhenols
1   14.23      1.71 2.43            15.6       127         2.80       3.06                0.28
2   13.20      1.78 2.14            11.2       100         2.65       2.76                0.26
3   13.16      2.36 2.67            18.6       101         2.80       3.24                0.30
4   14.37      1.95 2.50            16.8       113         3.85       3.49                0.24
5   13.24      2.59 2.87            21.0       118         2.80       2.69                0.39
6   14.20      1.76 2.45            15.2       112         3.27       3.39                0.34
  Proanthocyanins ColorIntensity  Hue OD280.OD315 Proline
1            2.29           5.64 1.04        3.92    1065
2            1.28           4.38 1.05        3.40    1050
3            2.81           5.68 1.03        3.17    1185
4            2.18           7.80 0.86        3.45    1480
5            1.82           4.32 1.04        2.93     735
6            1.97           6.75 1.05        2.85    1450
> # lets identify if there are missing values in the dataset
> 
> which(is.na(dataclean), arr.ind=TRUE)
     row col
> #seems all coloumns have data as no output showed rows of missing values
> #now to plot the data
> #to identify how many coloumns
> ncol(dataclean)
[1] 13
> plot(dataclean[,1:4])
> #this shows all coloumns but only rows 1 to 4
> #applying Kmean algorithm
> kc = kmeans(dataclean[,1:4], 2)
> kc
K-means clustering with 2 clusters of sizes 86, 92

Cluster means:
   Alcohol MalicAcid      Ash AlcalinityOfAsh
1 12.81733  2.770581 2.459884        22.17907
2 13.17196  1.930435 2.279239        16.98587

Clustering vector:
  [1] 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 2 1 1 2 2 2 2 1 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2
 [48] 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 2 2 2 2 1 2 2 1 1 2 2 1 1 1 1 2 1 1 2
 [95] 2 2 1 2 2 2 2 2 1 2 1 1 2 1 2 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 2 1 1 1 1 1
[142] 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 2 1 1 1 1 1 1

Within cluster sum of squares by cluster:
[1] 612.5218 475.1917
 (between_SS / total_SS =  53.2 %)

Available components:

[1] "cluster"      "centers"      "totss"        "withinss"     "tot.withinss" "betweenss"   
[7] "size"         "iter"         "ifault"      
> View(kc)
